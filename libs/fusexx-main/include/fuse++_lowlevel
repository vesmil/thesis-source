
#include <functional>

// queue: notification funcs, fuse_chan

class fuse_lowlevel {
public:
  fuse_lowlevel(struct fuse_args *args);
  ~fuse_lowlevel(); // fuse_session_destroy

  /**
   * Exit a session
   */
  void exit();

  /**
   * Reset the exited status of a session
   */
  void reset();

  /**
   * Query the exited status of a session
   *
   * @return true if exited, false if not exited
   */
  bool exited();

  /**
   * Enter a single threaded event loop
   *
   * @return 0 on success, -1 on error
   */
  int loop();

  /**
   * Enter a multi-threaded event loop
   *
   * @return 0 on success, -1 on error
   */
  int loop_mt();

protected:
  /** User ID of the calling process */
  uid_t uid;

  /** Group ID of the calling process */
  gid_t gid;

  /** Thread ID of the calling process */
  pid_t pid;

  /** Umask of the calling process (introduced in version 2.8) */
  mode_t umask;

  /**
   * Low level filesystem operations
   *
   * Most of the methods (with the exception of init and destroy)
   * receive a request (req_t) as their first argument.
   * This request must be used to reply.
   *
   * This may be done inside the method invocation, or after the call
   * has returned.  The request is valid until one of the reply
   * functions is called.
   *
   * Other pointer arguments (name, fuse_file_info, etc) are not valid
   * after the call has returned, so if they are needed later, their
   * contents have to be copied.
   *
   * The filesystem sometimes needs to handle a return value of -ENOENT
   * from the reply function, which means, that the request was
   * interrupted, and the reply discarded.  For example if
   * fuse_reply_open() return -ENOENT means, that the release method for
   * this file will not be called.
   */

  class req_t {
  public:
    /**
     * Reply with an error code or success
     *
     * Possible requests:
     *   all except forget
     *
     * unlink, rmdir, rename, flush, release, fsync, fsyncdir, setxattr,
     * removexattr and setlk may send a zero code
     *
     * @param err the positive error value, or zero for success
     * @return zero for success, -errno for failure to send reply
     */
    int reply_err(int err);

    /**
     * Don't send reply
     *
     * Possible requests:
     *   forget
     */
    void reply_none();

    /**
     * Reply with a directory entry
     *
     * Possible requests:
     *   lookup, mknod, mkdir, symlink, link
     *
     * Side effects:
     *   increments the lookup count on success
     *
     * @param e the entry parameters
     * @return zero for success, -errno for failure to send reply
     */
    int reply_entry(struct fuse_req *req, const struct fuse_entry_param *e);

    /**
     * Reply with a directory entry and open parameters
     *
     * currently the following members of 'fi' are used:
     *   fh, direct_io, keep_cache
     *
     * Possible requests:
     *   create
     *
     * Side effects:
     *   increments the lookup count on success
     *
     * @param e the entry parameters
     * @param fi file information
     * @return zero for success, -errno for failure to send reply
     */
    int reply_create(const struct fuse_entry_param *e,
                     const struct fuse_file_info *fi);

    /**
     * Reply with attributes
     *
     * Possible requests:
     *   getattr, setattr
     *
     * @param attr the attributes
     * @param attr_timeout	validity timeout (in seconds) for the attributes
     * @return zero for success, -errno for failure to send reply
     */
    int reply_attr(const struct stat *attr, double attr_timeout);

    /**
     * Reply with the contents of a symbolic link
     *
     * Possible requests:
     *   readlink
     *
     * @param link symbolic link contents
     * @return zero for success, -errno for failure to send reply
     */
    int reply_readlink(const char *link);

    /**
     * Reply with open parameters
     *
     * currently the following members of 'fi' are used:
     *   fh, direct_io, keep_cache
     *
     * Possible requests:
     *   open, opendir
     *
     * @param fi file information
     * @return zero for success, -errno for failure to send reply
     */
    int reply_open(const struct fuse_file_info *fi);

    /**
     * Reply with number of bytes written
     *
     * Possible requests:
     *   write
     *
     * @param count the number of bytes written
     * @return zero for success, -errno for failure to send reply
     */
    int reply_write(size_t count);

    /**
     * Reply with data
     *
     * Possible requests:
     *   read, readdir, getxattr, listxattr
     *
     * @param buf buffer containing data
     * @param size the size of data in bytes
     * @return zero for success, -errno for failure to send reply
     */
    int reply_buf(const char *buf, size_t size);

    /**
     * Reply with data copied/moved from buffer(s)
     *
     * Possible requests:
     *   read, readdir, getxattr, listxattr
     *
     * @param bufv buffer vector
     * @param flags flags controlling the copy
     * @return zero for success, -errno for failure to send reply
     */
    int reply_data(struct fuse_bufvec *bufv, int flags);

    /**
     * Reply with data vector
     *
     * Possible requests:
     *   read, readdir, getxattr, listxattr
     *
     * @param iov the vector containing the data
     * @param count the size of vector
     * @return zero for success, -errno for failure to send reply
     */
    int reply_iov(const struct iovec *iov, int count);

    /**
     * Reply with filesystem statistics
     *
     * Possible requests:
     *   statfs
     *
     * @param stbuf filesystem statistics
     * @return zero for success, -errno for failure to send reply
     */
    int reply_statfs(const struct statvfs *stbuf);

    /**
     * Reply with needed buffer size
     *
     * Possible requests:
     *   getxattr, listxattr
     *
     * @param count the buffer size needed in bytes
     * @return zero for success, -errno for failure to send reply
     */
    int reply_xattr(size_t count);

    /**
     * Reply with file lock information
     *
     * Possible requests:
     *   getlk
     *
     * @param lock the lock information
     * @return zero for success, -errno for failure to send reply
     */
    int reply_lock(const struct flock *lock);

    /**
     * Reply with block index
     *
     * Possible requests:
     *   bmap
     *
     * @param idx block index within device
     * @return zero for success, -errno for failure to send reply
     */
    int reply_bmap(uint64_t idx);

    /* ----------------------------------------------------------- *
     * Filling a buffer in readdir				       *
     * ----------------------------------------------------------- */

    /**
     * Add a directory entry to the buffer
     *
     * Buffer needs to be large enough to hold the entry.  If it's not,
     * then the entry is not filled in but the size of the entry is still
     * returned.  The caller can check this by comparing the bufsize
     * parameter with the returned entry size.  If the entry size is
     * larger than the buffer size, the operation failed.
     *
     * From the 'stbuf' argument the st_ino field and bits 12-15 of the
     * st_mode field are used.  The other fields are ignored.
     *
     * Note: offsets do not necessarily represent physical offsets, and
     * could be any marker, that enables the implementation to find a
     * specific point in the directory stream.
     *
     * @param buf the point where the new entry will be added to the buffer
     * @param bufsize remaining size of the buffer
     * @param name the name of the entry
     * @param stbuf the file attributes
     * @param off the offset of the next entry
     * @return the space needed for the entry
     */
    size_t add_direntry(char *buf, size_t bufsize, const char *name,
                        const struct stat *stbuf, off_t off);

    /**
     * Reply to ask for data fetch and output buffer preparation.  ioctl
     * will be retried with the specified input data fetched and output
     * buffer prepared.
     *
     * Possible requests:
     *   ioctl
     *
     * @param in_iov iovec specifying data to fetch from the caller
     * @param in_count number of entries in in_iov
     * @param out_iov iovec specifying addresses to write output to
     * @param out_count number of entries in out_iov
     * @return zero for success, -errno for failure to send reply
     */
    int reply_ioctl_retry(const struct iovec *in_iov, size_t in_count,
                          const struct iovec *out_iov, size_t out_count);

    /**
     * Reply to finish ioctl
     *
     * Possible requests:
     *   ioctl
     *
     * @param result result to be passed to the caller
     * @param buf buffer containing output data
     * @param size length of output data
     */
    int reply_ioctl(int result, const void *buf, size_t size);

    /**
     * Reply to finish ioctl with iov buffer
     *
     * Possible requests:
     *   ioctl
     *
     * @param result result to be passed to the caller
     * @param iov the vector containing the data
     * @param count the size of vector
     */
    int reply_ioctl_iov(int result, const struct iovec *iov, int count);

    /**
     * Reply with poll result event mask
     *
     * @param revents poll result event mask
     */
    int reply_poll(unsigned revents);

    /**
     * Get the fuse_lowlevel object from the request
     *
     * @return the fuse_lowlevel object
     */
    fuse_lowlevel &fuse();

    /**
     * Get the current supplementary group IDs for the specified request
     *
     * Similar to the getgroups(2) system call, except the return value is
     * always the total number of group IDs, even if it is larger than the
     * specified size.
     *
     * The current fuse kernel module in linux (as of 2.6.30) doesn't pass
     * the group list to userspace, hence this function needs to parse
     * "/proc/$TID/task/$TID/status" to get the group IDs.
     *
     * This feature may not be supported on all operating systems.  In
     * such a case this function will return -ENOSYS.
     *
     * @param size size of given array
     * @param list array of group IDs to be filled in
     * @return the total number of supplementary group IDs or -errno on failure
     */
    int getgroups(int size, gid_t list[]);

    /**
     * Register/unregister callback for an interrupt
     *
     * If an interrupt has already happened, then the callback function is
     * called from within this function, hence it's not possible for
     * interrupts to be lost.
     *
     * @param func the callback function or empty for unregister
     */
    void interrupt_func(std::function<void()> func = {});

    /**
     * Check if a request has already been interrupted
     *
     * @return true if the request has been interrupted, false otherwise
     */
    bool interrupted();

  private:
    struct fuse_req *fuse_req;
  };

  /**
   * Initialize filesystem
   *
   * Called before any other filesystem method
   *
   * There's no reply to this function
   */
  virtual void init(struct fuse_conn_info *conn);

  /**
   * Clean up filesystem
   *
   * Called on filesystem exit
   *
   * There's no reply to this function
   *
   * @param userdata the user data passed to fuse_lowlevel_new()
   */
  virtual void destroy();

  /**
   * Look up a directory entry by name and get its attributes.
   *
   * Valid replies:
   *   fuse_reply_entry
   *   fuse_reply_err
   *
   * @param req request handle
   * @param parent inode number of the parent directory
   * @param name the name to look up
   */
  virtual void lookup(struct fuse_req *req, uint64_t parent, const char *name);

  /**
   * Forget about an inode
   *
   * This function is called when the kernel removes an inode
   * from its internal caches.
   *
   * The inode's lookup count increases by one for every call to
   * fuse_reply_entry and fuse_reply_create. The nlookup parameter
   * indicates by how much the lookup count should be decreased.
   *
   * Inodes with a non-zero lookup count may receive request from
   * the kernel even after calls to unlink, rmdir or (when
   * overwriting an existing file) rename. Filesystems must handle
   * such requests properly and it is recommended to defer removal
   * of the inode until the lookup count reaches zero. Calls to
   * unlink, remdir or rename will be followed closely by forget
   * unless the file or directory is open, in which case the
   * kernel issues forget only after the release or releasedir
   * calls.
   *
   * Note that if a file system will be exported over NFS the
   * inodes lifetime must extend even beyond forget. See the
   * generation field in struct fuse_entry_param above.
   *
   * On unmount the lookup count for all inodes implicitly drops
   * to zero. It is not guaranteed that the file system will
   * receive corresponding forget messages for the affected
   * inodes.
   *
   * Valid replies:
   *   fuse_reply_none
   *
   * @param req request handle
   * @param ino the inode number
   * @param nlookup the number of lookups to forget
   */
  virtual void forget(struct fuse_req *req, uint64_t ino,
                      unsigned long nlookup);

  /**
   * Get file attributes
   *
   * Valid replies:
   *   fuse_reply_attr
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi for future use, currently always NULL
   */
  virtual void getattr(struct fuse_req *req, uint64_t ino,
                       struct fuse_file_info *fi);

  /**
   * Set file attributes
   *
   * In the 'attr' argument only members indicated by the 'to_set'
   * bitmask contain valid values.  Other members contain undefined
   * values.
   *
   * If the setattr was invoked from the ftruncate() system call
   * under Linux kernel versions 2.6.15 or later, the fi->fh will
   * contain the value set by the open method or will be undefined
   * if the open method didn't set any value.  Otherwise (not
   * ftruncate call, or kernel version earlier than 2.6.15) the fi
   * parameter will be NULL.
   *
   * Valid replies:
   *   fuse_reply_attr
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param attr the attributes
   * @param to_set bit mask of attributes which should be set
   * @param fi file information, or NULL
   *
   * Changed in version 2.5:
   *     file information filled in for ftruncate
   */
  virtual void setattr(struct fuse_req *req, uint64_t ino, struct stat *attr,
                       int to_set, struct fuse_file_info *fi);

  /**
   * Read symbolic link
   *
   * Valid replies:
   *   fuse_reply_readlink
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   */
  virtual void readlink(struct fuse_req *req, uint64_t ino);

  /**
   * Create file node
   *
   * Create a regular file, character device, block device, fifo or
   * socket node.
   *
   * Valid replies:
   *   fuse_reply_entry
   *   fuse_reply_err
   *
   * @param req request handle
   * @param parent inode number of the parent directory
   * @param name to create
   * @param mode file type and mode with which to create the new file
   * @param rdev the device number (only valid if created file is a device)
   */
  virtual void mknod(struct fuse_req *req, uint64_t parent, const char *name,
                     mode_t mode, dev_t rdev);

  /**
   * Create a directory
   *
   * Valid replies:
   *   fuse_reply_entry
   *   fuse_reply_err
   *
   * @param req request handle
   * @param parent inode number of the parent directory
   * @param name to create
   * @param mode with which to create the new file
   */
  virtual void mkdir(struct fuse_req *req, uint64_t parent, const char *name,
                     mode_t mode);

  /**
   * Remove a file
   *
   * If the file's inode's lookup count is non-zero, the file
   * system is expected to postpone any removal of the inode
   * until the lookup count reaches zero (see description of the
   * forget function).
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param parent inode number of the parent directory
   * @param name to remove
   */
  virtual void unlink(struct fuse_req *req, uint64_t parent, const char *name);

  /**
   * Remove a directory
   *
   * If the directory's inode's lookup count is non-zero, the
   * file system is expected to postpone any removal of the
   * inode until the lookup count reaches zero (see description
   * of the forget function).
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param parent inode number of the parent directory
   * @param name to remove
   */
  virtual void rmdir(struct fuse_req *req, uint64_t parent, const char *name);

  /**
   * Create a symbolic link
   *
   * Valid replies:
   *   fuse_reply_entry
   *   fuse_reply_err
   *
   * @param req request handle
   * @param link the contents of the symbolic link
   * @param parent inode number of the parent directory
   * @param name to create
   */
  virtual void symlink(struct fuse_req *req, const char *link, uint64_t parent,
                       const char *name);

  /** Rename a file
   *
   * If the target exists it should be atomically replaced. If
   * the target's inode's lookup count is non-zero, the file
   * system is expected to postpone any removal of the inode
   * until the lookup count reaches zero (see description of the
   * forget function).
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param parent inode number of the old parent directory
   * @param name old name
   * @param newparent inode number of the new parent directory
   * @param newname new name
   */
  virtual void rename(struct fuse_req *req, uint64_t parent, const char *name,
                      uint64_t newparent, const char *newname);

  /**
   * Create a hard link
   *
   * Valid replies:
   *   fuse_reply_entry
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the old inode number
   * @param newparent inode number of the new parent directory
   * @param newname new name to create
   */
  virtual void link(struct fuse_req *req, uint64_t ino, uint64_t newparent,
                    const char *newname);

  /**
   * Open a file
   *
   * Open flags (with the exception of O_CREAT, O_EXCL, O_NOCTTY and
   * O_TRUNC) are available in fi->flags.
   *
   * Filesystem may store an arbitrary file handle (pointer, index,
   * etc) in fi->fh, and use this in other all other file operations
   * (read, write, flush, release, fsync).
   *
   * Filesystem may also implement stateless file I/O and not store
   * anything in fi->fh.
   *
   * There are also some flags (direct_io, keep_cache) which the
   * filesystem may set in fi, to change the way the file is opened.
   * See fuse_file_info structure in <fuse_common.h> for more details.
   *
   * Valid replies:
   *   fuse_reply_open
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   */
  virtual void open(struct fuse_req *req, uint64_t ino,
                    struct fuse_file_info *fi);

  /**
   * Read data
   *
   * Read should send exactly the number of bytes requested except
   * on EOF or error, otherwise the rest of the data will be
   * substituted with zeroes.  An exception to this is when the file
   * has been opened in 'direct_io' mode, in which case the return
   * value of the read system call will reflect the return value of
   * this operation.
   *
   * fi->fh will contain the value set by the open method, or will
   * be undefined if the open method didn't set any value.
   *
   * Valid replies:
   *   fuse_reply_buf
   *   fuse_reply_iov
   *   fuse_reply_data
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param size number of bytes to read
   * @param off offset to read from
   * @param fi file information
   */
  virtual void read(struct fuse_req *req, uint64_t ino, size_t size, off_t off,
                    struct fuse_file_info *fi);

  /**
   * Write data
   *
   * Write should return exactly the number of bytes requested
   * except on error.  An exception to this is when the file has
   * been opened in 'direct_io' mode, in which case the return value
   * of the write system call will reflect the return value of this
   * operation.
   *
   * fi->fh will contain the value set by the open method, or will
   * be undefined if the open method didn't set any value.
   *
   * Valid replies:
   *   fuse_reply_write
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param buf data to write
   * @param size number of bytes to write
   * @param off offset to write to
   * @param fi file information
   */
  virtual void write(struct fuse_req *req, uint64_t ino, const char *buf,
                     size_t size, off_t off, struct fuse_file_info *fi);

  /**
   * Flush method
   *
   * This is called on each close() of the opened file.
   *
   * Since file descriptors can be duplicated (dup, dup2, fork), for
   * one open call there may be many flush calls.
   *
   * Filesystems shouldn't assume that flush will always be called
   * after some writes, or that if will be called at all.
   *
   * fi->fh will contain the value set by the open method, or will
   * be undefined if the open method didn't set any value.
   *
   * NOTE: the name of the method is misleading, since (unlike
   * fsync) the filesystem is not forced to flush pending writes.
   * One reason to flush data, is if the filesystem wants to return
   * write errors.
   *
   * If the filesystem supports file locking operations (setlk,
   * getlk) it should remove all locks belonging to 'fi->owner'.
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   */
  virtual void flush(struct fuse_req *req, uint64_t ino,
                     struct fuse_file_info *fi);

  /**
   * Release an open file
   *
   * Release is called when there are no more references to an open
   * file: all file descriptors are closed and all memory mappings
   * are unmapped.
   *
   * For every open call there will be exactly one release call.
   *
   * The filesystem may reply with an error, but error values are
   * not returned to close() or munmap() which triggered the
   * release.
   *
   * fi->fh will contain the value set by the open method, or will
   * be undefined if the open method didn't set any value.
   * fi->flags will contain the same flags as for open.
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   */
  virtual void release(struct fuse_req *req, uint64_t ino,
                       struct fuse_file_info *fi);

  /**
   * Synchronize file contents
   *
   * If the datasync parameter is non-zero, then only the user data
   * should be flushed, not the meta data.
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param datasync flag indicating if only data should be flushed
   * @param fi file information
   */
  virtual void fsync(struct fuse_req *req, uint64_t ino, int datasync,
                     struct fuse_file_info *fi);

  /**
   * Open a directory
   *
   * Filesystem may store an arbitrary file handle (pointer, index,
   * etc) in fi->fh, and use this in other all other directory
   * stream operations (readdir, releasedir, fsyncdir).
   *
   * Filesystem may also implement stateless directory I/O and not
   * store anything in fi->fh, though that makes it impossible to
   * implement standard conforming directory stream operations in
   * case the contents of the directory can change between opendir
   * and releasedir.
   *
   * Valid replies:
   *   fuse_reply_open
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   */
  virtual void opendir(struct fuse_req *req, uint64_t ino,
                       struct fuse_file_info *fi);

  /**
   * Read directory
   *
   * Send a buffer filled using fuse_add_direntry(), with size not
   * exceeding the requested size.  Send an empty buffer on end of
   * stream.
   *
   * fi->fh will contain the value set by the opendir method, or
   * will be undefined if the opendir method didn't set any value.
   *
   * Valid replies:
   *   fuse_reply_buf
   *   fuse_reply_data
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param size maximum number of bytes to send
   * @param off offset to continue reading the directory stream
   * @param fi file information
   */
  virtual void readdir(struct fuse_req *req, uint64_t ino, size_t size,
                       off_t off, struct fuse_file_info *fi);

  /**
   * Release an open directory
   *
   * For every opendir call there will be exactly one releasedir
   * call.
   *
   * fi->fh will contain the value set by the opendir method, or
   * will be undefined if the opendir method didn't set any value.
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   */
  virtual void releasedir(struct fuse_req *req, uint64_t ino,
                          struct fuse_file_info *fi);

  /**
   * Synchronize directory contents
   *
   * If the datasync parameter is non-zero, then only the directory
   * contents should be flushed, not the meta data.
   *
   * fi->fh will contain the value set by the opendir method, or
   * will be undefined if the opendir method didn't set any value.
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param datasync flag indicating if only data should be flushed
   * @param fi file information
   */
  virtual void fsyncdir(struct fuse_req *req, uint64_t ino, int datasync,
                        struct fuse_file_info *fi);

  /**
   * Get file system statistics
   *
   * Valid replies:
   *   fuse_reply_statfs
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number, zero means "undefined"
   */
  virtual void statfs(struct fuse_req *req, uint64_t ino);

  /**
   * Set an extended attribute
   *
   * Valid replies:
   *   fuse_reply_err
   */
  virtual void setxattr(struct fuse_req *req, uint64_t ino, const char *name,
                        const char *value, size_t size, int flags);

  /**
   * Get an extended attribute
   *
   * If size is zero, the size of the value should be sent with
   * fuse_reply_xattr.
   *
   * If the size is non-zero, and the value fits in the buffer, the
   * value should be sent with fuse_reply_buf.
   *
   * If the size is too small for the value, the ERANGE error should
   * be sent.
   *
   * Valid replies:
   *   fuse_reply_buf
   *   fuse_reply_data
   *   fuse_reply_xattr
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param name of the extended attribute
   * @param size maximum size of the value to send
   */
  virtual void getxattr(struct fuse_req *req, uint64_t ino, const char *name,
                        size_t size);

  /**
   * List extended attribute names
   *
   * If size is zero, the total size of the attribute list should be
   * sent with fuse_reply_xattr.
   *
   * If the size is non-zero, and the null character separated
   * attribute list fits in the buffer, the list should be sent with
   * fuse_reply_buf.
   *
   * If the size is too small for the list, the ERANGE error should
   * be sent.
   *
   * Valid replies:
   *   fuse_reply_buf
   *   fuse_reply_data
   *   fuse_reply_xattr
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param size maximum size of the list to send
   */
  virtual void listxattr(struct fuse_req *req, uint64_t ino, size_t size);

  /**
   * Remove an extended attribute
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param name of the extended attribute
   */
  virtual void removexattr(struct fuse_req *req, uint64_t ino,
                           const char *name);

  /**
   * Check file access permissions
   *
   * This will be called for the access() system call.  If the
   * 'default_permissions' mount option is given, this method is not
   * called.
   *
   * This method is not called under Linux kernel versions 2.4.x
   *
   * Introduced in version 2.5
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param mask requested access mode
   */
  virtual void access(struct fuse_req *req, uint64_t ino, int mask);

  /**
   * Create and open a file
   *
   * If the file does not exist, first create it with the specified
   * mode, and then open it.
   *
   * Open flags (with the exception of O_NOCTTY) are available in
   * fi->flags.
   *
   * Filesystem may store an arbitrary file handle (pointer, index,
   * etc) in fi->fh, and use this in other all other file operations
   * (read, write, flush, release, fsync).
   *
   * There are also some flags (direct_io, keep_cache) which the
   * filesystem may set in fi, to change the way the file is opened.
   * See fuse_file_info structure in <fuse_common.h> for more details.
   *
   * If this method is not implemented or under Linux kernel
   * versions earlier than 2.6.15, the mknod() and open() methods
   * will be called instead.
   *
   * Introduced in version 2.5
   *
   * Valid replies:
   *   fuse_reply_create
   *   fuse_reply_err
   *
   * @param req request handle
   * @param parent inode number of the parent directory
   * @param name to create
   * @param mode file type and mode with which to create the new file
   * @param fi file information
   */
  virtual void create(struct fuse_req *req, uint64_t parent, const char *name,
                      mode_t mode, struct fuse_file_info *fi);

  /**
   * Test for a POSIX file lock
   *
   * Introduced in version 2.6
   *
   * Valid replies:
   *   fuse_reply_lock
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   * @param lock the region/type to test
   */
  virtual void getlk(struct fuse_req *req, uint64_t ino,
                     struct fuse_file_info *fi, struct flock *lock);

  /**
   * Acquire, modify or release a POSIX file lock
   *
   * For POSIX threads (NPTL) there's a 1-1 relation between pid and
   * owner, but otherwise this is not always the case.  For checking
   * lock ownership, 'fi->owner' must be used.  The l_pid field in
   * 'struct flock' should only be used to fill in this field in
   * getlk().
   *
   * Note: if the locking methods are not implemented, the kernel
   * will still allow file locking to work locally.  Hence these are
   * only interesting for network filesystems and similar.
   *
   * Introduced in version 2.6
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   * @param lock the region/type to set
   * @param sleep locking operation may sleep
   */
  virtual void setlk(struct fuse_req *req, uint64_t ino,
                     struct fuse_file_info *fi, struct flock *lock, int sleep);

  /**
   * Map block index within file to block index within device
   *
   * Note: This makes sense only for block device backed filesystems
   * mounted with the 'blkdev' option
   *
   * Introduced in version 2.6
   *
   * Valid replies:
   *   fuse_reply_bmap
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param blocksize unit of block index
   * @param idx block index within file
   */
  virtual void bmap(struct fuse_req *req, uint64_t ino, size_t blocksize,
                    uint64_t idx);

  /**
   * Ioctl
   *
   * Note: For unrestricted ioctls (not allowed for FUSE
   * servers), data in and out areas can be discovered by giving
   * iovs and setting FUSE_IOCTL_RETRY in @flags.  For
   * restricted ioctls, kernel prepares in/out data area
   * according to the information encoded in cmd.
   *
   * Introduced in version 2.8
   *
   * Valid replies:
   *   fuse_reply_ioctl_retry
   *   fuse_reply_ioctl
   *   fuse_reply_ioctl_iov
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param cmd ioctl command
   * @param arg ioctl argument
   * @param fi file information
   * @param flags for FUSE_IOCTL_* flags
   * @param in_buf data fetched from the caller
   * @param in_bufsz number of fetched bytes
   * @param out_bufsz maximum size of output data
   */
  virtual void ioctl(struct fuse_req *req, uint64_t ino, int cmd, void *arg,
                     struct fuse_file_info *fi, unsigned flags,
                     const void *in_buf, size_t in_bufsz, size_t out_bufsz);

  /**
   * Poll for IO readiness
   *
   * Introduced in version 2.8
   *
   * Note: If ph is non-NULL, the client should notify
   * when IO readiness events occur by calling
   * fuse_lowelevel_notify_poll() with the specified ph.
   *
   * Regardless of the number of times poll with a non-NULL ph
   * is received, single notification is enough to clear all.
   * Notifying more times incurs overhead but doesn't harm
   * correctness.
   *
   * The callee is responsible for destroying ph with
   * fuse_pollhandle_destroy() when no longer in use.
   *
   * Valid replies:
   *   fuse_reply_poll
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   * @param ph poll handle to be used for notification
   */
  virtual void poll(struct fuse_req *req, uint64_t ino,
                    struct fuse_file_info *fi, struct fuse_pollhandle *ph);

  /**
   * Write data made available in a buffer
   *
   * This is a more generic version of the ->write() method.  If
   * FUSE_CAP_SPLICE_READ is set in fuse_conn_info.want and the
   * kernel supports splicing from the fuse device, then the
   * data will be made available in pipe for supporting zero
   * copy data transfer.
   *
   * Introduced in version 2.9
   *
   * Valid replies:
   *   fuse_reply_write
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param bufv buffer containing the data
   * @param off offset to write to
   * @param fi file information
   */
  virtual void write_buf(struct fuse_req *req, uint64_t ino,
                         struct fuse_bufvec *bufv, off_t off,
                         struct fuse_file_info *fi);

  /**
   * Callback function for the retrieve request
   *
   * Introduced in version 2.9
   *
   * Valid replies:
   *	fuse_reply_none
   *
   * @param req request handle
   * @param cookie user data supplied to fuse_lowlevel_notify_retrieve()
   * @param ino the inode number supplied to fuse_lowlevel_notify_retrieve()
   * @param offset the offset supplied to fuse_lowlevel_notify_retrieve()
   * @param bufv the buffer containing the returned data
   */
  virtual void retrieve_reply(struct fuse_req *req, void *cookie, uint64_t ino,
                              off_t offset, struct fuse_bufvec *bufv);

  /**
   * Forget about multiple inodes
   *
   * See description of the forget function for more
   * information.
   *
   * Introduced in version 2.9
   *
   * Valid replies:
   *   fuse_reply_none
   *
   * @param req request handle
   */
  virtual void forget_multi(struct fuse_req *req, size_t count,
                            struct fuse_forget_data *forgets);

  /**
   * Acquire, modify or release a BSD file lock
   *
   * Note: if the locking methods are not implemented, the kernel
   * will still allow file locking to work locally.  Hence these are
   * only interesting for network filesystems and similar.
   *
   * Introduced in version 2.9
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param fi file information
   * @param op the locking operation, see flock(2)
   */
  virtual void flock(struct fuse_req *req, uint64_t ino,
                     struct fuse_file_info *fi, int op);

  /**
   * Allocate requested space. If this function returns success then
   * subsequent writes to the specified range shall not fail due to the lack
   * of free space on the file system storage media.
   *
   * Introduced in version 2.9
   *
   * Valid replies:
   *   fuse_reply_err
   *
   * @param req request handle
   * @param ino the inode number
   * @param offset starting point for allocated region
   * @param length size of allocated region
   * @param mode determines the operation to be performed on the given range,
   *             see fallocate(2)
   */
  virtual void fallocate(struct fuse_req *req, uint64_t ino, int mode,
                         off_t offset, off_t length, struct fuse_file_info *fi);

private:
  struct fuse_session *session;
};
